// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_inv_involvement
std::vector<int> get_inv_involvement(std::vector<int> arr);
RcppExport SEXP _rmed_get_inv_involvement(SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inv_involvement(arr));
    return rcpp_result_gen;
END_RCPP
}
// get_inv_count
int get_inv_count(std::vector<int> arr);
RcppExport SEXP _rmed_get_inv_count(SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inv_count(arr));
    return rcpp_result_gen;
END_RCPP
}
// get_inv_pairs
std::vector<int> get_inv_pairs(std::vector<int> v, std::vector<int> lines);
RcppExport SEXP _rmed_get_inv_pairs(SEXP vSEXP, SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inv_pairs(v, lines));
    return rcpp_result_gen;
END_RCPP
}
// median_slopes
NumericVector median_slopes(NumericVector x, NumericVector y, NumericVector idx, int mdn_idx);
RcppExport SEXP _rmed_median_slopes(SEXP xSEXP, SEXP ySEXP, SEXP idxSEXP, SEXP mdn_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type mdn_idx(mdn_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(median_slopes(x, y, idx, mdn_idx));
    return rcpp_result_gen;
END_RCPP
}
// median_estimator
double median_estimator(NumericVector x, NumericVector y);
RcppExport SEXP _rmed_median_estimator(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(median_estimator(x, y));
    return rcpp_result_gen;
END_RCPP
}
// median_intercept
double median_intercept(NumericVector x, NumericVector y, double slope);
RcppExport SEXP _rmed_median_intercept(SEXP xSEXP, SEXP ySEXP, SEXP slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(median_intercept(x, y, slope));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmed_get_inv_involvement", (DL_FUNC) &_rmed_get_inv_involvement, 1},
    {"_rmed_get_inv_count", (DL_FUNC) &_rmed_get_inv_count, 1},
    {"_rmed_get_inv_pairs", (DL_FUNC) &_rmed_get_inv_pairs, 2},
    {"_rmed_median_slopes", (DL_FUNC) &_rmed_median_slopes, 4},
    {"_rmed_median_estimator", (DL_FUNC) &_rmed_median_estimator, 2},
    {"_rmed_median_intercept", (DL_FUNC) &_rmed_median_intercept, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmed(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
