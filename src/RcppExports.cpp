// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_inv_pairs
std::vector<int> get_inv_pairs(std::vector<int> v, std::vector<int> lines);
RcppExport SEXP _rmed_get_inv_pairs(SEXP vSEXP, SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inv_pairs(v, lines));
    return rcpp_result_gen;
END_RCPP
}
// get_conc_count
std::vector<int> get_conc_count(std::vector<int> arr);
RcppExport SEXP _rmed_get_conc_count(SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_conc_count(arr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmed_get_inv_pairs", (DL_FUNC) &_rmed_get_inv_pairs, 2},
    {"_rmed_get_conc_count", (DL_FUNC) &_rmed_get_conc_count, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmed(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
